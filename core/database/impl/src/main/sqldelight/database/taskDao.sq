CREATE TABLE IF NOT EXISTS TaskTable(
    id TEXT NOT NULL PRIMARY KEY,
    type TEXT NOT NULL,
    progressType TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    startEpochDay INTEGER NOT NULL,
    endEpochDay INTEGER NOT NULL,
    isDraft TEXT NOT NULL,
    createdAt INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS TaskContentTable(
    taskId TEXT NOT NULL,
    versionStartEpochDay INTEGER NOT NULL,
    progressContent TEXT NOT NULL,
    frequencyContent TEXT NOT NULL,
    isArchived TEXT NOT NULL,
    PRIMARY KEY (taskId, versionStartEpochDay),
    FOREIGN KEY (taskId) REFERENCES TaskTable(id)
);

CREATE TABLE IF NOT EXISTS ReminderTable(
    id TEXT NOT NULL PRIMARY KEY,
    taskId TEXT NOT NULL,
    time TEXT NOT NULL,
    type TEXT NOT NULL,
    schedule TEXT NOT NULL,
    createdAt INTEGER NOT NULL,
    FOREIGN KEY (taskId) REFERENCES TaskTable(id)
);

CREATE TABLE IF NOT EXISTS RecordTable(
    id TEXT NOT NULL PRIMARY KEY,
    taskId TEXT NOT NULL,
    entry TEXT NOT NULL,
    entryEpochDay INTEGER NOT NULL,
    createdAt INTEGER NOT NULL,
    FOREIGN KEY (taskId) REFERENCES TaskTable(id)
);

-- index

CREATE INDEX IF NOT EXISTS TaskStartEndDateIndex
ON TaskTable(startEpochDay, endEpochDay);

CREATE INDEX IF NOT EXISTS TaskTypeIndex
ON TaskTable(type);

CREATE INDEX IF NOT EXISTS TaskTitleIndex
ON TaskTable(title);

CREATE INDEX IF NOT EXISTS RecordEntryDateIndex
ON RecordTable(entryEpochDay);

-- trigger

CREATE TRIGGER IF NOT EXISTS OnTaskDelete_DeleteTaskContentTrigger
AFTER DELETE ON TaskTable
BEGIN
DELETE FROM TaskContentTable WHERE
TaskContentTable.taskId = old.id;
END;

CREATE TRIGGER IF NOT EXISTS OnTaskDelete_DeleteReminderTrigger
AFTER DELETE ON TaskTable
BEGIN
DELETE FROM ReminderTable WHERE
ReminderTable.taskId = old.id;
END;

CREATE TRIGGER IF NOT EXISTS OnTaskDelete_DeleteRecordTrigger
AFTER DELETE ON TaskTable
BEGIN
DELETE FROM RecordTable WHERE
RecordTable.taskId = old.id;
END;

-- views

CREATE VIEW IF NOT EXISTS TaskView AS
SELECT
tTask.id task_id,
tTask.type task_type,
tTask.progressType task_progressType,
tTask.title task_title,
tTask.description task_description,
tTask.startEpochDay task_startEpochDay,
tTask.endEpochDay task_endEpochDay,
tTask.isDraft task_isDraft,
tTask.createdAt task_createdAt,

tTaskContent.taskId taskContent_taskId,
tTaskContent.versionStartEpochDay taskContent_versionStartEpochDay,
tTaskContent.progressContent taskContent_progressContent,
tTaskContent.frequencyContent taskContent_frequencyContent,
tTaskContent.isArchived taskContent_isArchived
FROM TaskTable tTask
INNER JOIN TaskContentTable tTaskContent
ON tTaskContent.taskId = tTask.id;

-- query

selectTaskById:
SELECT * FROM TaskView tView
WHERE tView.task_id = :taskId
GROUP BY tView.task_id
HAVING tView.taskContent_versionStartEpochDay = MAX(tView.taskContent_versionStartEpochDay);

selectTasksByQuery:
SELECT * FROM TaskView tView
WHERE tView.task_title LIKE :searchQuery
GROUP BY tView.task_id
HAVING tView.taskContent_versionStartEpochDay = MAX(tView.taskContent_versionStartEpochDay);

selectTasksByDate:
SELECT * FROM TaskView tView
WHERE tView.task_startEpochDay <= :targetEpochDay AND
tView.task_endEpochDay >= :targetEpochDay AND
tView.taskContent_versionStartEpochDay <= :targetEpochDay
GROUP BY tView.task_id
HAVING tView.taskContent_versionStartEpochDay = MAX(tView.taskContent_versionStartEpochDay);

insertTask:
INSERT OR REPLACE INTO TaskTable
VALUES ?;

insertTaskContent:
INSERT OR REPLACE INTO TaskContentTable
VALUES ?;

updateTaskTitleById:
UPDATE TaskTable SET
title = :title
WHERE id = :taskId;

updateTaskStartEndDateById:
UPDATE TaskTable SET
startEpochDay = :startEpochDay,
endEpochDay = :endEpochDay
WHERE id = :taskId;

updateTaskDescriptionById:
UPDATE TaskTable SET
description = :description
WHERE id = :taskId;

updateTaskIsDraftById:
UPDATE TaskTable SET
isDraft = :isDraft
WHERE id = :taskId;

deleteTaskById:
DELETE FROM TaskTable
WHERE id = :taskId;